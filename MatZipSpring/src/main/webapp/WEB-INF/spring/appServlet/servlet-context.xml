<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<context:property-placeholder location="classpath:config.properties" />
	
	<!-- 필수   Enables the Spring MVC @Controller programming model 컨트롤러가 역할을 하도록 만든다 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- mapping이 웹 주소, location이 실제 파일 주소  **은 몇단계가 들어가든 무조건이라는 뜻 -->
	<resources mapping="/res/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- ViewResolver 역할 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 필수   Annotaion(@) 붙은 애들 전부 스캔하는 친구 -->
	<context:component-scan base-package="com.koreait.matzip" />
	
	
	<!-- DB연결 -->
	<beans:bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<beans:property name="poolName" value="springHikariCP" />
		<beans:property name="connectionTestQuery" value="SELECT 1 FROM DUAL" />
		<beans:property name="driverClassName" value="${db.driver}" />
		<beans:property name="maximumPoolSize" value="10" />
		<beans:property name="idleTimeout" value="5000" />
		
		<beans:property name="jdbcUrl" value="${db.url}" />
		<beans:property name="username" value="${db.username}" />
		<beans:property name="password" value="${db.password}" />
	</beans:bean>
	
	<beans:bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<beans:constructor-arg ref="hikariConfig" />
	</beans:bean>
	
	<!-- factory는 객체 생성 담당 -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="configLocation" value="/WEB-INF/spring/mybatis-alias.xml" />
	</beans:bean>
	
	<!-- base-package 아래로 @Mapper 찾을 것 -->
	<mybatis-spring:scan base-package="com.koreait.matzip" />
	
	<!-- tx: 트랜잭션 부분 시작, namespace에서 tx 체크할 것 -->
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- tx: 트랜잭션 부분 끝 -->
	
	<!-- 인터셉터 -->
	<interceptors>
		<interceptor>
			<mapping path="/**"/> <!-- mapping에 연결된 값 다 잡음 -->
			<beans:bean class="com.koreait.matzip.LoginCheckInterceptor" />
		</interceptor>
	</interceptors>
	
	<interceptors>
		<interceptor>
			<mapping path="/rest/**"/>
			<beans:bean class="com.koreait.matzip.RestInterceptor" />
		</interceptor>
	</interceptors>
	
	<!-- file Upload -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="5242880" /> <!-- 5MB -->
	</beans:bean>
</beans:beans>
